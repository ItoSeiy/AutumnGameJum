using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI;  [DisallowMultipleComponent] public class LineFactory : MonoBehaviour { 	[SerializeField] GameObject _linePrefab; 	[HideInInspector] Line _currentLine; 	[SerializeField] Transform _lineParent; 	[SerializeField] RigidbodyType2D _lineRigidBodyType = RigidbodyType2D.Kinematic; 	[SerializeField] LineEnableMode _lineEnableMode = LineEnableMode.ON_CREATE; 	[SerializeField] static LineFactory _instance; 	[SerializeField] Image _lineLife; 	[SerializeField] bool _enableLineLife; 	[SerializeField] bool _isRunning;  	void Awake () 	{ 		if (_instance == null)  		{ 			_instance = this; 		}  		else 		{ 			Destroy (gameObject); 		} 	}  	void Start () 	{ 		if (_lineParent == null)  		{ 			_lineParent = GameObject.Find ("LineObjects").transform; 		}  		if (_lineLife != null) 		{ 			if (_enableLineLife)  			{ 				_lineLife.gameObject.SetActive (true); 			}  			else  			{ 				_lineLife.gameObject.SetActive (false); 			} 		}  	}  	void Update () 	{ 		if (!_isRunning)  		{ 			return; 		}  		if (Input.GetMouseButtonDown (0))  		{ 			CreateNewLine (); 		}  		else if (Input.GetMouseButtonUp (0))  		{ 			RelaseCurrentLine (); 		}  		if (_currentLine != null)  		{ 			_currentLine.AddPoint (Camera.main.ScreenToWorldPoint (Input.mousePosition)); 			UpdateLineLife (); 			if (_currentLine.ReachedPointsLimit ())  			{ 				RelaseCurrentLine (); 			} 		} 	}  	private void CreateNewLine () 	{ 		_currentLine = (Instantiate (_linePrefab, Vector3.zero, Quaternion.identity) as GameObject).GetComponent<Line> (); 		_currentLine.name = "Line"; 		_currentLine.transform.SetParent (_lineParent); 		_currentLine.SetRigidBodyType (_lineRigidBodyType);  		if (_lineEnableMode == LineEnableMode.ON_CREATE)  		{ 			EnableLine (); 		} 	}  	private void EnableLine () 	{ 		_currentLine.EnableCollider (); 		_currentLine.SimulateRigidBody (); 	}  	private void RelaseCurrentLine () 	{ 		if (_lineEnableMode == LineEnableMode.ON_RELASE)  		{ 			EnableLine (); 		}  		_currentLine = null; 	}  	private void UpdateLineLife () 	{ 		if (!_enableLineLife)  		{ 			return; 		}  		if (_lineLife == null)  		{ 			return; 		}  		_lineLife.fillAmount = 1 - (_currentLine.points.Count / _currentLine.maxPoints); 	}  	public enum LineEnableMode 	{ 		ON_CREATE, 		ON_RELASE}  	; } 